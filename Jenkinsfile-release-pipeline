// Pipeline qui va gérer la montée de version du projet et la création d'un TAG pour la Recette
// 
// En entrée, pour lancer le Build, il faudra renseigner :
// - la BRANCH ou origin/master (par défaut) à partir de laquelle un TAG au format AA.BB.CC va être créé dans Gitlab.
// 
// En sortie, les éléments suivants seront créés :
// - une nouvelle version MAVEN de développement AA.BB.{CC+1}-SNAPSHOT sur la BRANCH sélectionnée.
// - un nouveau TAG en version AA.BB.CC créé à partir de la BRANCH sélectionnée.
// - une nouvelle image Docker par composant applicatif en version AA.BB.CC dans le registre Docker.
// 
// Les développeurs développeront avec cette nouvelle version MAVEN de développement sur la BRANCH sélectionnée.

@Library('my-shared-library') _

node { 
    
    echo 'Hello World' 
    
    stage ('Checkout scm') {
        def result = checkout scm
        
        // Additional Behaviours Check out to specific local branch
        // disable lightweight checkout to work this
	echo "branche = ${result['GIT_BRANCH']}"

	// lecture du pom
	pom = readMavenPom file: "micro-serices-sample-parent/pom.xml"
        def versionApp = pom.version
	echo "env=${env}"

        indexOf= versionApp.indexOf('-SNAPSHOT')
        imageVersion = versionApp.substring(0,indexOf)
	echo "imageVersion=${imageVersion}"
     
    }
    

   
    stage ('update compose to tag with new version') {  

       echo "imageVersion=${imageVersion}"
       updateCompose {
	     projectName = 'ms-sample'
	     path = ['config-server','registry','shop-ms','products-ms']
             imgVersion = imageVersion
	}

       
       def change = sh returnStdout: true, script: 'git status --short | wc -l'
       echo "change= ${change}" 
       
       if (change.toInteger() >0) {

           def message = "update compose version to ${imageVersion}"
           gitCommit {
	     commitMessage = message
	   }
       	   
           gitPush {
	     gitCredentialsId = 'git-credentials'
	   }
          
       }
    }

     stage ('Maven release plugin') {

      withMaven(maven: 'maven3'){
			// Run maven release plugin
			sh "mvn --batch-mode release:prepare -Dresume=false"
		}
       
    }


    stage ('update compose to latest') {  

       updateCompose {
	     projectName = 'ms-sample'
	     path = ['config-server','registry','shop-ms','products-ms']
             imgVersion = 'latest'
	}

       
       def change = sh returnStdout: true, script: 'git status --short | wc -l'
       echo "change= ${change}" 
       
       if (change.toInteger() >0) {

           def message = "update compose version to latest"
           gitCommit {
	     commitMessage = message
	   }
       	   
           gitPush {
	     gitCredentialsId = 'git-credentials'
	   }
          
       }
    }


    /*  

    stage ('build docker') { 

        dockerBuild {
	     projectName = 'ms-sample'
	     path = ['config-server','registry','shop-ms','products-ms']
	     imgVersion = imageVersion
             isLatest = true
	}
    }


    stage ('docker push') {  

       dockerLogin {
	     credentialsId = 'docker-registry-credentials'
	}

        dockerPush {
	     dockerHubId = ajConsultingDockerHubId
             projectName = 'ms-sample'
	     path = ['config-server','registry']
             tag = imageVersion
	}

    }

    */
}

